#include <SoftwareSerial.h>
#include <AFMotor.h>
AF_DCMotor motor_L(1);            
AF_DCMotor motor_R(4); 

int Lspeed = 170;       //좌측 모터 속도
int Rspeed = 200;     //우측 모터 속도

#define BT_RXD A5
#define BT_TXD A4
SoftwareSerial bluetooth(BT_RXD, BT_TXD);      

char rec_data;
char mode;
bool rec_chk = false;

int i;
int j;

//초음파센서 출력핀(trig)과 입력핀(echo) 설정
int trigPin = A0;
int echoPin = A1;
long duration, distance;

void Obstacle_Check();
void Distance_Measurement();
void Forward();
void Backward();
void Right();
void Left();
void Stop();

void setup(){
  Serial.begin(9600);              // PC와의 시리얼 통신속도
  bluetooth.begin(9600);            // 스마트폰 블루투스 통신속도
  Serial.println("Eduino Smart Car Start!");

  pinMode(echoPin, INPUT);   // echoPin 입력
  pinMode(trigPin, OUTPUT);  // trigPin 출력

  // turn on motor
  motor_L.setSpeed(200);              // 왼쪽 모터의 속도   
  motor_L.run(RELEASE);
  motor_R.setSpeed(200);              // 오른쪽 모터의 속도   
  motor_R.run(RELEASE);
}

void loop(){

  while(1){

      if(bluetooth.available()){         // 블루투스 명령 수신
            rec_data = bluetooth.read();
            Serial.write(rec_data);
           // rec_chk = true;
          }  

       //수동 주행 모드 (default)
           if(rec_data == 'g'){  // 전진, go
            motor_L.run(FORWARD);  
            motor_R.run(FORWARD);        
          } 
          else if(rec_data == 'b'){ // 후진, back
            motor_L.run(BACKWARD);  
            motor_R.run(BACKWARD);    
          }
          else if(rec_data == 'l'){ // 좌회전, Go Left
          motor_L.run(RELEASE);  
          motor_R.run(FORWARD);     
          }
          else if(rec_data == 'r'){ // 우회전, Go Right
            motor_L.run(FORWARD);  
            motor_R.run(RELEASE);                
          }
          else if(rec_data == 'q'){ // 제자리 회전, Left Rotation
            motor_L.run(BACKWARD);  
            motor_R.run(FORWARD);      
          }
          else if(rec_data == 'w'){ // 제자리 회전, Right Rotation
              motor_L.run(FORWARD);   
              motor_R.run(BACKWARD);    
          }
          else if(rec_data == 's'){ // Stop 
            motor_L.run(RELEASE);       
            motor_R.run(RELEASE);
            } 

          if(rec_data == 'f' ){       // 정지
            if(rec_chk == true){
              for (i=250; i>=0; i=i-20) {
                  motor_L.setSpeed(i);  
                  motor_R.setSpeed(i);  
                  delay(10);
              }  
              
            }
          }

      //자율주행 모드
        if(rec_data=='a'){ 
           Forward();
           delay(50);
           Obstacle_Check();                
        }

        if(rec_data=='y'){ //자율 주행모드 stop
         motor_L.run(RELEASE);       
            motor_R.run(RELEASE);
        }          

  }
  
 
}

///////////장애물 확인 및 회피 방향 결정///////////
void Obstacle_Check() {
  int val = random(2);
  Distance_Measurement();
  delay(50);
  
  Serial.println(distance);

  while (distance < 300) {
    if (distance < 150) {
      Backward();
      delay(800);
      Stop();
      delay(50);
      Distance_Measurement();
      delay(100);
    }
    else {
      if (val == 0) {
        Right();
        delay(400);
      }
      else if (val == 1) {
        Left();
        delay(400);
      }
      Distance_Measurement();
      delay(100);
    }
  }
}


////////거리감지///////////
void Distance_Measurement() {
  digitalWrite(trigPin, LOW);
  delay(2);
  digitalWrite(trigPin, HIGH);  // trigPin에서 초음파 발생(echoPin도 HIGH)
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);    // echoPin 이 HIGH를 유지한 시간을 저장 한다.
  distance = ((float)(340 * duration) / 1000) / 2;
  delay(50);
}


///////////모터 제어 함수////////////
void Forward() {
  motor_L.run(FORWARD);  motor_R.run(FORWARD);
  motor_L.setSpeed(Lspeed);  motor_R.setSpeed(Rspeed);
}

void Backward() {
  motor_L.run(BACKWARD);  motor_R.run(BACKWARD);
  motor_L.setSpeed(Lspeed);  motor_R.setSpeed(Rspeed);
}

void Right() {
  motor_L.run(FORWARD);  motor_R.run(BACKWARD);
  motor_L.setSpeed(Lspeed);  motor_R.setSpeed(Rspeed*0.5);
}

void Left() {
  motor_L.run(BACKWARD);  motor_R.run(FORWARD);
  motor_L.setSpeed(Lspeed*0.5);  motor_R.setSpeed(Rspeed);
}

void Stop() {
  motor_L.run(RELEASE);       motor_R.run(RELEASE);
  motor_L.setSpeed(0);  motor_R.setSpeed(0);
}


